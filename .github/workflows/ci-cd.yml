name: NeuroBuildTech CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: neurobuildtech

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [users-service, services-service, consulting-service, ai-service, n8n-service, iot-service, payments-service, api-gateway]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: neurobuild
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend/${{ matrix.service }}
        npm ci
    
    - name: Run tests
      run: |
        cd backend/${{ matrix.service }}
        npm test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: neurobuild
        DB_PASSWORD: password
        DB_NAME: test_db

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mfe: [mfe-landing, mfe-services, shell-app]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/${{ matrix.mfe }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/${{ matrix.mfe }}
        npm ci
    
    - name: Install missing test dependencies
      run: |
        cd frontend/${{ matrix.mfe }}
        npm install --save-dev jest-environment-jsdom @testing-library/jest-dom
    
    - name: Run tests
      run: |
        cd frontend/${{ matrix.mfe }}
        npm test

  # Build Docker Images
  build-backend:
    runs-on: ubuntu-latest
    needs: backend-tests
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [users-service, services-service, consulting-service, ai-service, n8n-service, iot-service, payments-service, api-gateway]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/${{ matrix.service }}
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    needs: frontend-tests
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        mfe: [mfe-landing, mfe-services, shell-app]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/${{ matrix.mfe }}
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.mfe }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.mfe }}:${{ github.sha }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/users-service:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Here you would add actual deployment scripts
        # For example, using kubectl, helm, or docker-compose
        
  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Here you would add actual production deployment scripts