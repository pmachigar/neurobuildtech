# Kubernetes Deployment Example for NeuroBuildTech Backend
# This file demonstrates how to deploy the backend with security features

apiVersion: v1
kind: Namespace
metadata:
  name: neurobuildtech
  labels:
    name: neurobuildtech

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: neurobuildtech
data:
  NODE_ENV: "production"
  PORT: "3000"
  API_VERSION: "v1"
  LOG_LEVEL: "info"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  ENABLE_AUDIT_LOGGING: "true"
  ENABLE_RATE_LIMITING: "true"
  ENABLE_DDOS_PROTECTION: "true"
  OAUTH2_ENABLED: "false"

---
# Secret for sensitive configuration (should be created separately or using Sealed Secrets)
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: neurobuildtech
type: Opaque
stringData:
  JWT_SECRET: "change-this-secret-in-production"
  DB_PASSWORD: "change-this-password"
  REDIS_PASSWORD: "change-this-password"
  VAULT_TOKEN: "your-vault-token"
  MQTT_PASSWORD: "change-this-password"

---
# Deployment for Backend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: neurobuildtech
  labels:
    app: backend
    tier: backend
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: backend
        component: api
        monitoring: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: backend-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      containers:
      - name: backend
        image: neurobuildtech/backend:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        # Load from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: API_VERSION
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: API_VERSION
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: LOG_LEVEL
        
        # Load from Secret
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: JWT_SECRET
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: REDIS_PASSWORD
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: VAULT_TOKEN
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        - name: logs
          mountPath: /var/log/neurobuildtech
        - name: certs
          mountPath: /etc/neurobuildtech/certs
          readOnly: true
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: certs
        secret:
          secretName: tls-certs
          defaultMode: 0400

---
# Service for Backend
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: neurobuildtech
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: backend

---
# ServiceAccount for Backend
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: neurobuildtech

---
# HorizontalPodAutoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: neurobuildtech
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# PodDisruptionBudget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: neurobuildtech
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend

---
# Ingress for Backend API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: neurobuildtech
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "10"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.neurobuildtech.com
    secretName: api-tls-cert
  rules:
  - host: api.neurobuildtech.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 80

---
# NetworkPolicy for Backend (from network-policies.yaml)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: neurobuildtech
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# Vault Agent Injector Configuration (if using Vault)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth
  namespace: neurobuildtech

---
apiVersion: v1
kind: Secret
metadata:
  name: vault-token
  namespace: neurobuildtech
  annotations:
    kubernetes.io/service-account.name: vault-auth
type: kubernetes.io/service-account-token

---
# Example Pod with Vault Agent Sidecar
apiVersion: v1
kind: Pod
metadata:
  name: backend-with-vault
  namespace: neurobuildtech
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "backend"
    vault.hashicorp.com/agent-inject-secret-database: "secret/data/database/config"
    vault.hashicorp.com/agent-inject-template-database: |
      {{- with secret "secret/data/database/config" -}}
      export DB_PASSWORD="{{ .Data.data.password }}"
      {{- end }}
spec:
  serviceAccountName: vault-auth
  containers:
  - name: backend
    image: neurobuildtech/backend:latest
    command: ["/bin/sh"]
    args: ["-c", "source /vault/secrets/database && node server.js"]
